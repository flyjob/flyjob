/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.Details;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DetailsRecord extends UpdatableRecordImpl<DetailsRecord> implements Record13<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> {

    private static final long serialVersionUID = -964146150;

    /**
     * Setter for <code>auth.details.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>auth.details.uuid</code>.
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>auth.details.version</code>.
     */
    public void setVersion(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>auth.details.version</code>.
     */
    public Long getVersion() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>auth.details.process_status</code>.
     */
    public void setProcessStatus(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>auth.details.process_status</code>.
     */
    public String getProcessStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>auth.details.row_status</code>.
     */
    public void setRowStatus(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>auth.details.row_status</code>.
     */
    public String getRowStatus() {
        return (String) get(3);
    }

    /**
     * Setter for <code>auth.details.created_date</code>.
     */
    public void setCreatedDate(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>auth.details.created_date</code>.
     */
    public LocalDateTime getCreatedDate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>auth.details.modification_date</code>.
     */
    public void setModificationDate(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>auth.details.modification_date</code>.
     */
    public LocalDateTime getModificationDate() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>auth.details.user_uuid</code>.
     */
    public void setUserUuid(UUID value) {
        set(6, value);
    }

    /**
     * Getter for <code>auth.details.user_uuid</code>.
     */
    public UUID getUserUuid() {
        return (UUID) get(6);
    }

    /**
     * Setter for <code>auth.details.is_account_non_expired</code>.
     */
    public void setİsAccountNonExpired(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>auth.details.is_account_non_expired</code>.
     */
    public Boolean getİsAccountNonExpired() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>auth.details.is_account_non_locked</code>.
     */
    public void setİsAccountNonLocked(Boolean value) {
        set(8, value);
    }

    /**
     * Getter for <code>auth.details.is_account_non_locked</code>.
     */
    public Boolean getİsAccountNonLocked() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>auth.details.is_credentials_non_expired</code>.
     */
    public void setİsCredentialsNonExpired(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>auth.details.is_credentials_non_expired</code>.
     */
    public Boolean getİsCredentialsNonExpired() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>auth.details.is_enabled</code>.
     */
    public void setİsEnabled(Boolean value) {
        set(10, value);
    }

    /**
     * Getter for <code>auth.details.is_enabled</code>.
     */
    public Boolean getİsEnabled() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>auth.details.is_deleted</code>.
     */
    public void setİsDeleted(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for <code>auth.details.is_deleted</code>.
     */
    public Boolean getİsDeleted() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>auth.details.is_frozen</code>.
     */
    public void setİsFrozen(Boolean value) {
        set(12, value);
    }

    /**
     * Getter for <code>auth.details.is_frozen</code>.
     */
    public Boolean getİsFrozen() {
        return (Boolean) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Details.DETAİLS.UUİD;
    }

    @Override
    public Field<Long> field2() {
        return Details.DETAİLS.VERSİON;
    }

    @Override
    public Field<String> field3() {
        return Details.DETAİLS.PROCESS_STATUS;
    }

    @Override
    public Field<String> field4() {
        return Details.DETAİLS.ROW_STATUS;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Details.DETAİLS.CREATED_DATE;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Details.DETAİLS.MODİFİCATİON_DATE;
    }

    @Override
    public Field<UUID> field7() {
        return Details.DETAİLS.USER_UUİD;
    }

    @Override
    public Field<Boolean> field8() {
        return Details.DETAİLS.İS_ACCOUNT_NON_EXPİRED;
    }

    @Override
    public Field<Boolean> field9() {
        return Details.DETAİLS.İS_ACCOUNT_NON_LOCKED;
    }

    @Override
    public Field<Boolean> field10() {
        return Details.DETAİLS.İS_CREDENTİALS_NON_EXPİRED;
    }

    @Override
    public Field<Boolean> field11() {
        return Details.DETAİLS.İS_ENABLED;
    }

    @Override
    public Field<Boolean> field12() {
        return Details.DETAİLS.İS_DELETED;
    }

    @Override
    public Field<Boolean> field13() {
        return Details.DETAİLS.İS_FROZEN;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public Long component2() {
        return getVersion();
    }

    @Override
    public String component3() {
        return getProcessStatus();
    }

    @Override
    public String component4() {
        return getRowStatus();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedDate();
    }

    @Override
    public LocalDateTime component6() {
        return getModificationDate();
    }

    @Override
    public UUID component7() {
        return getUserUuid();
    }

    @Override
    public Boolean component8() {
        return getİsAccountNonExpired();
    }

    @Override
    public Boolean component9() {
        return getİsAccountNonLocked();
    }

    @Override
    public Boolean component10() {
        return getİsCredentialsNonExpired();
    }

    @Override
    public Boolean component11() {
        return getİsEnabled();
    }

    @Override
    public Boolean component12() {
        return getİsDeleted();
    }

    @Override
    public Boolean component13() {
        return getİsFrozen();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public Long value2() {
        return getVersion();
    }

    @Override
    public String value3() {
        return getProcessStatus();
    }

    @Override
    public String value4() {
        return getRowStatus();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedDate();
    }

    @Override
    public LocalDateTime value6() {
        return getModificationDate();
    }

    @Override
    public UUID value7() {
        return getUserUuid();
    }

    @Override
    public Boolean value8() {
        return getİsAccountNonExpired();
    }

    @Override
    public Boolean value9() {
        return getİsAccountNonLocked();
    }

    @Override
    public Boolean value10() {
        return getİsCredentialsNonExpired();
    }

    @Override
    public Boolean value11() {
        return getİsEnabled();
    }

    @Override
    public Boolean value12() {
        return getİsDeleted();
    }

    @Override
    public Boolean value13() {
        return getİsFrozen();
    }

    @Override
    public DetailsRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public DetailsRecord value2(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public DetailsRecord value3(String value) {
        setProcessStatus(value);
        return this;
    }

    @Override
    public DetailsRecord value4(String value) {
        setRowStatus(value);
        return this;
    }

    @Override
    public DetailsRecord value5(LocalDateTime value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public DetailsRecord value6(LocalDateTime value) {
        setModificationDate(value);
        return this;
    }

    @Override
    public DetailsRecord value7(UUID value) {
        setUserUuid(value);
        return this;
    }

    @Override
    public DetailsRecord value8(Boolean value) {
        setİsAccountNonExpired(value);
        return this;
    }

    @Override
    public DetailsRecord value9(Boolean value) {
        setİsAccountNonLocked(value);
        return this;
    }

    @Override
    public DetailsRecord value10(Boolean value) {
        setİsCredentialsNonExpired(value);
        return this;
    }

    @Override
    public DetailsRecord value11(Boolean value) {
        setİsEnabled(value);
        return this;
    }

    @Override
    public DetailsRecord value12(Boolean value) {
        setİsDeleted(value);
        return this;
    }

    @Override
    public DetailsRecord value13(Boolean value) {
        setİsFrozen(value);
        return this;
    }

    @Override
    public DetailsRecord values(UUID value1, Long value2, String value3, String value4, LocalDateTime value5, LocalDateTime value6, UUID value7, Boolean value8, Boolean value9, Boolean value10, Boolean value11, Boolean value12, Boolean value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DetailsRecord
     */
    public DetailsRecord() {
        super(Details.DETAİLS);
    }

    /**
     * Create a detached, initialised DetailsRecord
     */
    public DetailsRecord(UUID uuid, Long version, String processStatus, String rowStatus, LocalDateTime createdDate, LocalDateTime modificationDate, UUID userUuid, Boolean isAccountNonExpired, Boolean isAccountNonLocked, Boolean isCredentialsNonExpired, Boolean isEnabled, Boolean isDeleted, Boolean isFrozen) {
        super(Details.DETAİLS);

        set(0, uuid);
        set(1, version);
        set(2, processStatus);
        set(3, rowStatus);
        set(4, createdDate);
        set(5, modificationDate);
        set(6, userUuid);
        set(7, isAccountNonExpired);
        set(8, isAccountNonLocked);
        set(9, isCredentialsNonExpired);
        set(10, isEnabled);
        set(11, isDeleted);
        set(12, isFrozen);
    }
}
