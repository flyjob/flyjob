/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.CoverPictures;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record15;
import org.jooq.Row15;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoverPicturesRecord extends UpdatableRecordImpl<CoverPicturesRecord> implements Record15<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, String, Boolean, String, String, String, String, Long, String> {

    private static final long serialVersionUID = 1410927537;

    /**
     * Setter for <code>auth.cover_pictures.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.uuid</code>.
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>auth.cover_pictures.version</code>.
     */
    public void setVersion(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.version</code>.
     */
    public Long getVersion() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>auth.cover_pictures.process_status</code>.
     */
    public void setProcessStatus(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.process_status</code>.
     */
    public String getProcessStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>auth.cover_pictures.row_status</code>.
     */
    public void setRowStatus(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.row_status</code>.
     */
    public String getRowStatus() {
        return (String) get(3);
    }

    /**
     * Setter for <code>auth.cover_pictures.created_date</code>.
     */
    public void setCreatedDate(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.created_date</code>.
     */
    public LocalDateTime getCreatedDate() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>auth.cover_pictures.modification_date</code>.
     */
    public void setModificationDate(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.modification_date</code>.
     */
    public LocalDateTime getModificationDate() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>auth.cover_pictures.user_uuid</code>.
     */
    public void setUserUuid(UUID value) {
        set(6, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.user_uuid</code>.
     */
    public UUID getUserUuid() {
        return (UUID) get(6);
    }

    /**
     * Setter for <code>auth.cover_pictures.access_modifier</code>.
     */
    public void setAccessModifier(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.access_modifier</code>.
     */
    public String getAccessModifier() {
        return (String) get(7);
    }

    /**
     * Setter for <code>auth.cover_pictures.is_current</code>.
     */
    public void setİsCurrent(Boolean value) {
        set(8, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.is_current</code>.
     */
    public Boolean getİsCurrent() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>auth.cover_pictures.region</code>.
     */
    public void setRegion(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.region</code>.
     */
    public String getRegion() {
        return (String) get(9);
    }

    /**
     * Setter for <code>auth.cover_pictures.file_path</code>.
     */
    public void setFilePath(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.file_path</code>.
     */
    public String getFilePath() {
        return (String) get(10);
    }

    /**
     * Setter for <code>auth.cover_pictures.file_name</code>.
     */
    public void setFileName(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.file_name</code>.
     */
    public String getFileName() {
        return (String) get(11);
    }

    /**
     * Setter for <code>auth.cover_pictures.file_format</code>.
     */
    public void setFileFormat(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.file_format</code>.
     */
    public String getFileFormat() {
        return (String) get(12);
    }

    /**
     * Setter for <code>auth.cover_pictures.file_size</code>.
     */
    public void setFileSize(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.file_size</code>.
     */
    public Long getFileSize() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>auth.cover_pictures.header_line_color</code>.
     */
    public void setHeaderLineColor(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>auth.cover_pictures.header_line_color</code>.
     */
    public String getHeaderLineColor() {
        return (String) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record15 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, String, Boolean, String, String, String, String, Long, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    @Override
    public Row15<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, String, Boolean, String, String, String, String, Long, String> valuesRow() {
        return (Row15) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return CoverPictures.COVER_PİCTURES.UUİD;
    }

    @Override
    public Field<Long> field2() {
        return CoverPictures.COVER_PİCTURES.VERSİON;
    }

    @Override
    public Field<String> field3() {
        return CoverPictures.COVER_PİCTURES.PROCESS_STATUS;
    }

    @Override
    public Field<String> field4() {
        return CoverPictures.COVER_PİCTURES.ROW_STATUS;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return CoverPictures.COVER_PİCTURES.CREATED_DATE;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return CoverPictures.COVER_PİCTURES.MODİFİCATİON_DATE;
    }

    @Override
    public Field<UUID> field7() {
        return CoverPictures.COVER_PİCTURES.USER_UUİD;
    }

    @Override
    public Field<String> field8() {
        return CoverPictures.COVER_PİCTURES.ACCESS_MODİFİER;
    }

    @Override
    public Field<Boolean> field9() {
        return CoverPictures.COVER_PİCTURES.İS_CURRENT;
    }

    @Override
    public Field<String> field10() {
        return CoverPictures.COVER_PİCTURES.REGİON;
    }

    @Override
    public Field<String> field11() {
        return CoverPictures.COVER_PİCTURES.FİLE_PATH;
    }

    @Override
    public Field<String> field12() {
        return CoverPictures.COVER_PİCTURES.FİLE_NAME;
    }

    @Override
    public Field<String> field13() {
        return CoverPictures.COVER_PİCTURES.FİLE_FORMAT;
    }

    @Override
    public Field<Long> field14() {
        return CoverPictures.COVER_PİCTURES.FİLE_SİZE;
    }

    @Override
    public Field<String> field15() {
        return CoverPictures.COVER_PİCTURES.HEADER_LİNE_COLOR;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public Long component2() {
        return getVersion();
    }

    @Override
    public String component3() {
        return getProcessStatus();
    }

    @Override
    public String component4() {
        return getRowStatus();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedDate();
    }

    @Override
    public LocalDateTime component6() {
        return getModificationDate();
    }

    @Override
    public UUID component7() {
        return getUserUuid();
    }

    @Override
    public String component8() {
        return getAccessModifier();
    }

    @Override
    public Boolean component9() {
        return getİsCurrent();
    }

    @Override
    public String component10() {
        return getRegion();
    }

    @Override
    public String component11() {
        return getFilePath();
    }

    @Override
    public String component12() {
        return getFileName();
    }

    @Override
    public String component13() {
        return getFileFormat();
    }

    @Override
    public Long component14() {
        return getFileSize();
    }

    @Override
    public String component15() {
        return getHeaderLineColor();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public Long value2() {
        return getVersion();
    }

    @Override
    public String value3() {
        return getProcessStatus();
    }

    @Override
    public String value4() {
        return getRowStatus();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedDate();
    }

    @Override
    public LocalDateTime value6() {
        return getModificationDate();
    }

    @Override
    public UUID value7() {
        return getUserUuid();
    }

    @Override
    public String value8() {
        return getAccessModifier();
    }

    @Override
    public Boolean value9() {
        return getİsCurrent();
    }

    @Override
    public String value10() {
        return getRegion();
    }

    @Override
    public String value11() {
        return getFilePath();
    }

    @Override
    public String value12() {
        return getFileName();
    }

    @Override
    public String value13() {
        return getFileFormat();
    }

    @Override
    public Long value14() {
        return getFileSize();
    }

    @Override
    public String value15() {
        return getHeaderLineColor();
    }

    @Override
    public CoverPicturesRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value2(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value3(String value) {
        setProcessStatus(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value4(String value) {
        setRowStatus(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value5(LocalDateTime value) {
        setCreatedDate(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value6(LocalDateTime value) {
        setModificationDate(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value7(UUID value) {
        setUserUuid(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value8(String value) {
        setAccessModifier(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value9(Boolean value) {
        setİsCurrent(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value10(String value) {
        setRegion(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value11(String value) {
        setFilePath(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value12(String value) {
        setFileName(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value13(String value) {
        setFileFormat(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value14(Long value) {
        setFileSize(value);
        return this;
    }

    @Override
    public CoverPicturesRecord value15(String value) {
        setHeaderLineColor(value);
        return this;
    }

    @Override
    public CoverPicturesRecord values(UUID value1, Long value2, String value3, String value4, LocalDateTime value5, LocalDateTime value6, UUID value7, String value8, Boolean value9, String value10, String value11, String value12, String value13, Long value14, String value15) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoverPicturesRecord
     */
    public CoverPicturesRecord() {
        super(CoverPictures.COVER_PİCTURES);
    }

    /**
     * Create a detached, initialised CoverPicturesRecord
     */
    public CoverPicturesRecord(UUID uuid, Long version, String processStatus, String rowStatus, LocalDateTime createdDate, LocalDateTime modificationDate, UUID userUuid, String accessModifier, Boolean isCurrent, String region, String filePath, String fileName, String fileFormat, Long fileSize, String headerLineColor) {
        super(CoverPictures.COVER_PİCTURES);

        set(0, uuid);
        set(1, version);
        set(2, processStatus);
        set(3, rowStatus);
        set(4, createdDate);
        set(5, modificationDate);
        set(6, userUuid);
        set(7, accessModifier);
        set(8, isCurrent);
        set(9, region);
        set(10, filePath);
        set(11, fileName);
        set(12, fileFormat);
        set(13, fileSize);
        set(14, headerLineColor);
    }
}
