/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Auth;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Keys;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records.CoverPicturesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoverPictures extends TableImpl<CoverPicturesRecord> {

    private static final long serialVersionUID = 1049066314;

    /**
     * The reference instance of <code>auth.cover_pictures</code>
     */
    public static final CoverPictures COVER_PİCTURES = new CoverPictures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoverPicturesRecord> getRecordType() {
        return CoverPicturesRecord.class;
    }

    /**
     * The column <code>auth.cover_pictures.uuid</code>.
     */
    public final TableField<CoverPicturesRecord, UUID> UUİD = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.version</code>.
     */
    public final TableField<CoverPicturesRecord, Long> VERSİON = createField(DSL.name("version"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>auth.cover_pictures.process_status</code>.
     */
    public final TableField<CoverPicturesRecord, String> PROCESS_STATUS = createField(DSL.name("process_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.row_status</code>.
     */
    public final TableField<CoverPicturesRecord, String> ROW_STATUS = createField(DSL.name("row_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.created_date</code>.
     */
    public final TableField<CoverPicturesRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.modification_date</code>.
     */
    public final TableField<CoverPicturesRecord, LocalDateTime> MODİFİCATİON_DATE = createField(DSL.name("modification_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>auth.cover_pictures.user_uuid</code>.
     */
    public final TableField<CoverPicturesRecord, UUID> USER_UUİD = createField(DSL.name("user_uuid"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>auth.cover_pictures.access_modifier</code>.
     */
    public final TableField<CoverPicturesRecord, String> ACCESS_MODİFİER = createField(DSL.name("access_modifier"), org.jooq.impl.SQLDataType.VARCHAR(32).defaultValue(org.jooq.impl.DSL.field("'ONLY_AUTHENTICATED'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>auth.cover_pictures.is_current</code>.
     */
    public final TableField<CoverPicturesRecord, Boolean> İS_CURRENT = createField(DSL.name("is_current"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>auth.cover_pictures.region</code>.
     */
    public final TableField<CoverPicturesRecord, String> REGİON = createField(DSL.name("region"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.field("'eu-central-1'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>auth.cover_pictures.file_path</code>.
     */
    public final TableField<CoverPicturesRecord, String> FİLE_PATH = createField(DSL.name("file_path"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.file_name</code>.
     */
    public final TableField<CoverPicturesRecord, String> FİLE_NAME = createField(DSL.name("file_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.file_format</code>.
     */
    public final TableField<CoverPicturesRecord, String> FİLE_FORMAT = createField(DSL.name("file_format"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.file_size</code>.
     */
    public final TableField<CoverPicturesRecord, Long> FİLE_SİZE = createField(DSL.name("file_size"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>auth.cover_pictures.header_line_color</code>.
     */
    public final TableField<CoverPicturesRecord, String> HEADER_LİNE_COLOR = createField(DSL.name("header_line_color"), org.jooq.impl.SQLDataType.VARCHAR(14).defaultValue(org.jooq.impl.DSL.field("'#ffffff'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>auth.cover_pictures</code> table reference
     */
    public CoverPictures() {
        this(DSL.name("cover_pictures"), null);
    }

    /**
     * Create an aliased <code>auth.cover_pictures</code> table reference
     */
    public CoverPictures(String alias) {
        this(DSL.name(alias), COVER_PİCTURES);
    }

    /**
     * Create an aliased <code>auth.cover_pictures</code> table reference
     */
    public CoverPictures(Name alias) {
        this(alias, COVER_PİCTURES);
    }

    private CoverPictures(Name alias, Table<CoverPicturesRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoverPictures(Name alias, Table<CoverPicturesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CoverPictures(Table<O> child, ForeignKey<O, CoverPicturesRecord> key) {
        super(child, key, COVER_PİCTURES);
    }

    @Override
    public Schema getSchema() {
        return Auth.AUTH;
    }

    @Override
    public UniqueKey<CoverPicturesRecord> getPrimaryKey() {
        return Keys.PK_COVER_PİCTURES;
    }

    @Override
    public List<UniqueKey<CoverPicturesRecord>> getKeys() {
        return Arrays.<UniqueKey<CoverPicturesRecord>>asList(Keys.PK_COVER_PİCTURES);
    }

    @Override
    public List<ForeignKey<CoverPicturesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoverPicturesRecord, ?>>asList(Keys.COVER_PİCTURES__FK_COVER_PİCTURES_ON_USER_UUİD);
    }

    public Users users() {
        return new Users(this, Keys.COVER_PİCTURES__FK_COVER_PİCTURES_ON_USER_UUİD);
    }

    @Override
    public CoverPictures as(String alias) {
        return new CoverPictures(DSL.name(alias), this);
    }

    @Override
    public CoverPictures as(Name alias) {
        return new CoverPictures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoverPictures rename(String name) {
        return new CoverPictures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoverPictures rename(Name name) {
        return new CoverPictures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, String, Boolean, String, String, String, String, Long, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
