/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Auth;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Keys;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records.DetailsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Details extends TableImpl<DetailsRecord> {

    private static final long serialVersionUID = -224686153;

    /**
     * The reference instance of <code>auth.details</code>
     */
    public static final Details DETAİLS = new Details();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DetailsRecord> getRecordType() {
        return DetailsRecord.class;
    }

    /**
     * The column <code>auth.details.uuid</code>.
     */
    public final TableField<DetailsRecord, UUID> UUİD = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>auth.details.version</code>.
     */
    public final TableField<DetailsRecord, Long> VERSİON = createField(DSL.name("version"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>auth.details.process_status</code>.
     */
    public final TableField<DetailsRecord, String> PROCESS_STATUS = createField(DSL.name("process_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.details.row_status</code>.
     */
    public final TableField<DetailsRecord, String> ROW_STATUS = createField(DSL.name("row_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.details.created_date</code>.
     */
    public final TableField<DetailsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>auth.details.modification_date</code>.
     */
    public final TableField<DetailsRecord, LocalDateTime> MODİFİCATİON_DATE = createField(DSL.name("modification_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>auth.details.user_uuid</code>.
     */
    public final TableField<DetailsRecord, UUID> USER_UUİD = createField(DSL.name("user_uuid"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>auth.details.is_account_non_expired</code>.
     */
    public final TableField<DetailsRecord, Boolean> İS_ACCOUNT_NON_EXPİRED = createField(DSL.name("is_account_non_expired"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>auth.details.is_account_non_locked</code>.
     */
    public final TableField<DetailsRecord, Boolean> İS_ACCOUNT_NON_LOCKED = createField(DSL.name("is_account_non_locked"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>auth.details.is_credentials_non_expired</code>.
     */
    public final TableField<DetailsRecord, Boolean> İS_CREDENTİALS_NON_EXPİRED = createField(DSL.name("is_credentials_non_expired"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>auth.details.is_enabled</code>.
     */
    public final TableField<DetailsRecord, Boolean> İS_ENABLED = createField(DSL.name("is_enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>auth.details.is_deleted</code>.
     */
    public final TableField<DetailsRecord, Boolean> İS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>auth.details.is_frozen</code>.
     */
    public final TableField<DetailsRecord, Boolean> İS_FROZEN = createField(DSL.name("is_frozen"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>auth.details</code> table reference
     */
    public Details() {
        this(DSL.name("details"), null);
    }

    /**
     * Create an aliased <code>auth.details</code> table reference
     */
    public Details(String alias) {
        this(DSL.name(alias), DETAİLS);
    }

    /**
     * Create an aliased <code>auth.details</code> table reference
     */
    public Details(Name alias) {
        this(alias, DETAİLS);
    }

    private Details(Name alias, Table<DetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Details(Name alias, Table<DetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Details(Table<O> child, ForeignKey<O, DetailsRecord> key) {
        super(child, key, DETAİLS);
    }

    @Override
    public Schema getSchema() {
        return Auth.AUTH;
    }

    @Override
    public UniqueKey<DetailsRecord> getPrimaryKey() {
        return Keys.PK_DETAİLS;
    }

    @Override
    public List<UniqueKey<DetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<DetailsRecord>>asList(Keys.PK_DETAİLS);
    }

    @Override
    public List<ForeignKey<DetailsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DetailsRecord, ?>>asList(Keys.DETAİLS__FK_DETAİLS_ON_USER_UUİD);
    }

    public Users users() {
        return new Users(this, Keys.DETAİLS__FK_DETAİLS_ON_USER_UUİD);
    }

    @Override
    public Details as(String alias) {
        return new Details(DSL.name(alias), this);
    }

    @Override
    public Details as(Name alias) {
        return new Details(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Details rename(String name) {
        return new Details(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Details rename(Name name) {
        return new Details(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
