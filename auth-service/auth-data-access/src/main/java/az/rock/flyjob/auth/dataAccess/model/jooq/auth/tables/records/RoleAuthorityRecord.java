/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.RoleAuthority;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleAuthorityRecord extends UpdatableRecordImpl<RoleAuthorityRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = -1038546625;

    /**
     * Setter for <code>auth.role_authority.authority_id</code>.
     */
    public void setAuthorityİd(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>auth.role_authority.authority_id</code>.
     */
    public UUID getAuthorityİd() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>auth.role_authority.role_id</code>.
     */
    public void setRoleİd(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>auth.role_authority.role_id</code>.
     */
    public UUID getRoleİd() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return RoleAuthority.ROLE_AUTHORİTY.AUTHORİTY_İD;
    }

    @Override
    public Field<UUID> field2() {
        return RoleAuthority.ROLE_AUTHORİTY.ROLE_İD;
    }

    @Override
    public UUID component1() {
        return getAuthorityİd();
    }

    @Override
    public UUID component2() {
        return getRoleİd();
    }

    @Override
    public UUID value1() {
        return getAuthorityİd();
    }

    @Override
    public UUID value2() {
        return getRoleİd();
    }

    @Override
    public RoleAuthorityRecord value1(UUID value) {
        setAuthorityİd(value);
        return this;
    }

    @Override
    public RoleAuthorityRecord value2(UUID value) {
        setRoleİd(value);
        return this;
    }

    @Override
    public RoleAuthorityRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RoleAuthorityRecord
     */
    public RoleAuthorityRecord() {
        super(RoleAuthority.ROLE_AUTHORİTY);
    }

    /**
     * Create a detached, initialised RoleAuthorityRecord
     */
    public RoleAuthorityRecord(UUID authorityİd, UUID roleİd) {
        super(RoleAuthority.ROLE_AUTHORİTY);

        set(0, authorityİd);
        set(1, roleİd);
    }
}
