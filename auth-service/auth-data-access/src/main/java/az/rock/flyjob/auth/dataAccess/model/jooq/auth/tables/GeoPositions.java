/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Auth;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Keys;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records.GeoPositionsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeoPositions extends TableImpl<GeoPositionsRecord> {

    private static final long serialVersionUID = 1380034663;

    /**
     * The reference instance of <code>auth.geo_positions</code>
     */
    public static final GeoPositions GEO_POSİTİONS = new GeoPositions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeoPositionsRecord> getRecordType() {
        return GeoPositionsRecord.class;
    }

    /**
     * The column <code>auth.geo_positions.uuid</code>.
     */
    public final TableField<GeoPositionsRecord, UUID> UUİD = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>auth.geo_positions.version</code>.
     */
    public final TableField<GeoPositionsRecord, Long> VERSİON = createField(DSL.name("version"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>auth.geo_positions.process_status</code>.
     */
    public final TableField<GeoPositionsRecord, String> PROCESS_STATUS = createField(DSL.name("process_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.geo_positions.row_status</code>.
     */
    public final TableField<GeoPositionsRecord, String> ROW_STATUS = createField(DSL.name("row_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.geo_positions.created_date</code>.
     */
    public final TableField<GeoPositionsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>auth.geo_positions.modification_date</code>.
     */
    public final TableField<GeoPositionsRecord, LocalDateTime> MODİFİCATİON_DATE = createField(DSL.name("modification_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>auth.geo_positions.device_entity_uuid</code>.
     */
    public final TableField<GeoPositionsRecord, UUID> DEVİCE_ENTİTY_UUİD = createField(DSL.name("device_entity_uuid"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>auth.geo_positions.country_code</code>.
     */
    public final TableField<GeoPositionsRecord, String> COUNTRY_CODE = createField(DSL.name("country_code"), org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>auth.geo_positions.latitude</code>.
     */
    public final TableField<GeoPositionsRecord, BigDecimal> LATİTUDE = createField(DSL.name("latitude"), org.jooq.impl.SQLDataType.NUMERIC(10, 8), this, "");

    /**
     * The column <code>auth.geo_positions.longitude</code>.
     */
    public final TableField<GeoPositionsRecord, BigDecimal> LONGİTUDE = createField(DSL.name("longitude"), org.jooq.impl.SQLDataType.NUMERIC(11, 8), this, "");

    /**
     * The column <code>auth.geo_positions.timezone</code>.
     */
    public final TableField<GeoPositionsRecord, String> TİMEZONE = createField(DSL.name("timezone"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>auth.geo_positions.gmt</code>.
     */
    public final TableField<GeoPositionsRecord, String> GMT = createField(DSL.name("gmt"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * Create a <code>auth.geo_positions</code> table reference
     */
    public GeoPositions() {
        this(DSL.name("geo_positions"), null);
    }

    /**
     * Create an aliased <code>auth.geo_positions</code> table reference
     */
    public GeoPositions(String alias) {
        this(DSL.name(alias), GEO_POSİTİONS);
    }

    /**
     * Create an aliased <code>auth.geo_positions</code> table reference
     */
    public GeoPositions(Name alias) {
        this(alias, GEO_POSİTİONS);
    }

    private GeoPositions(Name alias, Table<GeoPositionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeoPositions(Name alias, Table<GeoPositionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GeoPositions(Table<O> child, ForeignKey<O, GeoPositionsRecord> key) {
        super(child, key, GEO_POSİTİONS);
    }

    @Override
    public Schema getSchema() {
        return Auth.AUTH;
    }

    @Override
    public UniqueKey<GeoPositionsRecord> getPrimaryKey() {
        return Keys.PK_GEO_POSİTİONS;
    }

    @Override
    public List<UniqueKey<GeoPositionsRecord>> getKeys() {
        return Arrays.<UniqueKey<GeoPositionsRecord>>asList(Keys.PK_GEO_POSİTİONS);
    }

    @Override
    public List<ForeignKey<GeoPositionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GeoPositionsRecord, ?>>asList(Keys.GEO_POSİTİONS__FK_GEO_POSİTİONS_ON_DEVİCEENTİTY_UUİD);
    }

    public Devices devices() {
        return new Devices(this, Keys.GEO_POSİTİONS__FK_GEO_POSİTİONS_ON_DEVİCEENTİTY_UUİD);
    }

    @Override
    public GeoPositions as(String alias) {
        return new GeoPositions(DSL.name(alias), this);
    }

    @Override
    public GeoPositions as(Name alias) {
        return new GeoPositions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeoPositions rename(String name) {
        return new GeoPositions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeoPositions rename(Name name) {
        return new GeoPositions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, Long, String, String, LocalDateTime, LocalDateTime, UUID, String, BigDecimal, BigDecimal, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
