/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Auth;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Keys;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records.DetailRoleRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DetailRole extends TableImpl<DetailRoleRecord> {

    private static final long serialVersionUID = -1035356973;

    /**
     * The reference instance of <code>auth.detail_role</code>
     */
    public static final DetailRole DETAİL_ROLE = new DetailRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DetailRoleRecord> getRecordType() {
        return DetailRoleRecord.class;
    }

    /**
     * The column <code>auth.detail_role.detail_uuid</code>.
     */
    public final TableField<DetailRoleRecord, UUID> DETAİL_UUİD = createField(DSL.name("detail_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>auth.detail_role.role_uuid</code>.
     */
    public final TableField<DetailRoleRecord, UUID> ROLE_UUİD = createField(DSL.name("role_uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>auth.detail_role</code> table reference
     */
    public DetailRole() {
        this(DSL.name("detail_role"), null);
    }

    /**
     * Create an aliased <code>auth.detail_role</code> table reference
     */
    public DetailRole(String alias) {
        this(DSL.name(alias), DETAİL_ROLE);
    }

    /**
     * Create an aliased <code>auth.detail_role</code> table reference
     */
    public DetailRole(Name alias) {
        this(alias, DETAİL_ROLE);
    }

    private DetailRole(Name alias, Table<DetailRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private DetailRole(Name alias, Table<DetailRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DetailRole(Table<O> child, ForeignKey<O, DetailRoleRecord> key) {
        super(child, key, DETAİL_ROLE);
    }

    @Override
    public Schema getSchema() {
        return Auth.AUTH;
    }

    @Override
    public UniqueKey<DetailRoleRecord> getPrimaryKey() {
        return Keys.PK_DETAİL_ROLE;
    }

    @Override
    public List<UniqueKey<DetailRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<DetailRoleRecord>>asList(Keys.PK_DETAİL_ROLE);
    }

    @Override
    public List<ForeignKey<DetailRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DetailRoleRecord, ?>>asList(Keys.DETAİL_ROLE__FK_DETROL_ON_DETAİL_ENTİTY, Keys.DETAİL_ROLE__FK_DETROL_ON_ROLE_ENTİTY);
    }

    public Details details() {
        return new Details(this, Keys.DETAİL_ROLE__FK_DETROL_ON_DETAİL_ENTİTY);
    }

    public Roles roles() {
        return new Roles(this, Keys.DETAİL_ROLE__FK_DETROL_ON_ROLE_ENTİTY);
    }

    @Override
    public DetailRole as(String alias) {
        return new DetailRole(DSL.name(alias), this);
    }

    @Override
    public DetailRole as(Name alias) {
        return new DetailRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DetailRole rename(String name) {
        return new DetailRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DetailRole rename(Name name) {
        return new DetailRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
