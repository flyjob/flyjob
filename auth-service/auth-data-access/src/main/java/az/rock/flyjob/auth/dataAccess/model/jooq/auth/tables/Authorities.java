/*
 * This file is generated by jOOQ.
 */
package az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables;


import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Auth;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.Keys;
import az.rock.flyjob.auth.dataAccess.model.jooq.auth.tables.records.AuthoritiesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authorities extends TableImpl<AuthoritiesRecord> {

    private static final long serialVersionUID = 1919411760;

    /**
     * The reference instance of <code>auth.authorities</code>
     */
    public static final Authorities AUTHORİTİES = new Authorities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthoritiesRecord> getRecordType() {
        return AuthoritiesRecord.class;
    }

    /**
     * The column <code>auth.authorities.uuid</code>.
     */
    public final TableField<AuthoritiesRecord, UUID> UUİD = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>auth.authorities.version</code>.
     */
    public final TableField<AuthoritiesRecord, Long> VERSİON = createField(DSL.name("version"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>auth.authorities.process_status</code>.
     */
    public final TableField<AuthoritiesRecord, String> PROCESS_STATUS = createField(DSL.name("process_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.authorities.row_status</code>.
     */
    public final TableField<AuthoritiesRecord, String> ROW_STATUS = createField(DSL.name("row_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.authorities.created_date</code>.
     */
    public final TableField<AuthoritiesRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>auth.authorities.modification_date</code>.
     */
    public final TableField<AuthoritiesRecord, LocalDateTime> MODİFİCATİON_DATE = createField(DSL.name("modification_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>auth.authorities.permission</code>.
     */
    public final TableField<AuthoritiesRecord, String> PERMİSSİON = createField(DSL.name("permission"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>auth.authorities.description</code>.
     */
    public final TableField<AuthoritiesRecord, String> DESCRİPTİON = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>auth.authorities</code> table reference
     */
    public Authorities() {
        this(DSL.name("authorities"), null);
    }

    /**
     * Create an aliased <code>auth.authorities</code> table reference
     */
    public Authorities(String alias) {
        this(DSL.name(alias), AUTHORİTİES);
    }

    /**
     * Create an aliased <code>auth.authorities</code> table reference
     */
    public Authorities(Name alias) {
        this(alias, AUTHORİTİES);
    }

    private Authorities(Name alias, Table<AuthoritiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authorities(Name alias, Table<AuthoritiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Authorities(Table<O> child, ForeignKey<O, AuthoritiesRecord> key) {
        super(child, key, AUTHORİTİES);
    }

    @Override
    public Schema getSchema() {
        return Auth.AUTH;
    }

    @Override
    public UniqueKey<AuthoritiesRecord> getPrimaryKey() {
        return Keys.PK_AUTHORİTİES;
    }

    @Override
    public List<UniqueKey<AuthoritiesRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthoritiesRecord>>asList(Keys.PK_AUTHORİTİES, Keys.UC_AUTHORİTİES_PERMİSSİON);
    }

    @Override
    public Authorities as(String alias) {
        return new Authorities(DSL.name(alias), this);
    }

    @Override
    public Authorities as(Name alias) {
        return new Authorities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorities rename(String name) {
        return new Authorities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authorities rename(Name name) {
        return new Authorities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, Long, String, String, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
