server:
  port: ${PORT:8082}
eureka:
  instance:
    preferIpAddress: true
spring:
  profiles:
    active: ${PROFILE:develop}
  application:
    name: api-gateway
  config:
    fail-fast: true
    retry:
      maxAttempts: 200
      maxInterval: 10000
    import: ${CONFIG_URL:optional:configserver:http://localhost:8012}
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  banner:
    location: classpath:banner.txt
  main:
    allow-circular-references: true
    web-application-type: reactive
feign:
  client:
    config:
      default:
        connect-timeout: 5000
        read-timeout: 5000

#
#kafka-config:
#    bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
#    schema-registry-url-key: schema.registry.url
#    schema-registry-url: http://localhost:8081
#    num-of-partitions: 3
#    replication-factor: 3
#
#kafka-producer-config:
#    key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
#    value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
#    compression-type: snappy
#    acks: all
#    batch-size: 16384
#    batch-size-boost-factor: 100
#    linger-ms: 5
#    request-timeout-ms: 60000
#    retry-count: 5
#
#kafka-consumer-config:
#    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#    restaurant-approval-consumer-group-id: gateway.authorization
#    auto-offset-reset: earliest
#    specific-avro-reader-key: specific.avro.reader
#    specific-avro-reader: true
#    batch-listener: true
#    auto-startup: true
#    concurrency-level: 3
#    session-timeout-ms: 10000
#    heartbeat-interval-ms: 3000
#    max-poll-interval-ms: 300000
#    max-poll-records: 500
#    max-partition-fetch-bytes-default: 1048576
#    max-partition-fetch-bytes-boost-factor: 1
#    poll-timeout-ms: 150